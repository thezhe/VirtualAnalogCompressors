
    namespace math
    {
  

        //Calculate t given the linearly interpolated value y in the range [a, b] and the values of 1/(b-a) and a/(a-b)
        //Option to multiply the result by a scale 
        T invLerp<T> (T divbma, T adivamb, T y, T scale)
        {
            return (y * divbma + adivamb) * scale;
        }

        /** Create a lookup table of function f(x) for values of x in the interval [a,b] using n samples
        
        - Possible values for f: 1 = log10(x)*log10(x), 2 = OmegaToG(x)
        - Use with Math::invLerp and a clamped value if needed
        - Use to set a const array
        */
        T[] createLookupTable<T>(int f, int a, int b, int n)
        {
            static_assert(f > 0 && f < 3, "VA::Math::LUT::createLookupTable: Argument f must be an int in interval [1, 3].");

            T[n] lut;
            
            T maxIdx = n - 1;

            for(int i = 0; i < n; ++i)
            {
                T x = lerp(a, b, i / maxIdx);

                //decide function at compile time
                if const (f == 1)
                {
                    T temp = log10(x);
                    lut.at(i) = log10(x);
                }
            }
            return lut;
        }

    }
